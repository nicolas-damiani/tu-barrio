<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FirebaseAdmin</name>
    </assembly>
    <members>
        <member name="T:FirebaseAdmin.AppOptions">
            <summary>
            Configurable options that can be specified when creating a <see cref="T:FirebaseAdmin.FirebaseApp"/>.
            See <a href="https://firebase.google.com/docs/admin/setup#initialize_the_sdk">
            Initialize the SDK</a> for code samples and detailed documentation.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.AppOptions.#ctor">
            <summary>
            Initializes a new instance of the  <see cref="T:FirebaseAdmin.AppOptions"/> class.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.AppOptions.Credential">
            <summary>
            Gets or sets the <see cref="T:Google.Apis.Auth.OAuth2.GoogleCredential"/> used to authorize an app. All service
            calls made by the app will be authorized using this.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.AppOptions.ProjectId">
            <summary>
            Gets or sets the Google Cloud Platform project ID that should be associated with an
            app.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.AppOptions.ServiceAccountId">
            <summary>
            Gets or sets the unique ID of the service account that should be associated with an
            app.
            <para>This is used to <a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens">
            create custom auth tokens</a> when service account credentials are not available. The
            service account ID can be found in the <c>client_email</c> field of the service account
            JSON.</para>
            </summary>
        </member>
        <member name="P:FirebaseAdmin.AppOptions.HttpClientFactory">
            <summary>
            Gets or sets the HttpClientFactory to use when making Firebase requests.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.FirebaseAuth">
            <summary>
            This is the entry point to all server-side Firebase Authentication operations. You can
            get an instance of this class via <c>FirebaseAuth.DefaultInstance</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseAuth.DefaultInstance">
            <summary>
            Gets the auth instance associated with the default Firebase app. This property is
            <c>null</c> if the default app doesn't yet exist.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.GetAuth(FirebaseAdmin.FirebaseApp)">
            <summary>
            Returns the auth instance for the specified app.
            </summary>
            <returns>The <see cref="T:FirebaseAdmin.Auth.FirebaseAuth"/> instance associated with the specified
            app.</returns>
            <exception cref="T:System.ArgumentNullException">If the app argument is null.</exception>
            <param name="app">An app instance.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String)">
            <summary>
            Creates a Firebase custom token for the given user ID. This token can then be sent
            back to a client application to be used with the
            <a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">
            signInWithCustomToken</a> authentication API.
            <para>
            This method attempts to generate a token using:
            <list type="number">
            <item>
            <description>the private key of <see cref="T:FirebaseAdmin.FirebaseApp"/>'s service account
            credentials, if provided at initialization.</description>
            </item>
            <item>
            <description>the IAM service if a service accound ID was specified via
            <see cref="T:FirebaseAdmin.AppOptions"/></description>
            </item>
            <item>
            <description>the local metadata server if the code is deployed in a GCP-managed
            environment.</description>
            </item>
            </list>
            </para>
            </summary>
            <returns>A task that completes with a Firebase custom token.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while creating a custom
            token.</exception>
            <param name="uid">The UID to store in the token. This identifies the user to other
            Firebase services (Realtime Database, Firebase Auth, etc.). Must not be longer than
            128 characters.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a Firebase custom token for the given user ID. This token can then be sent
            back to a client application to be used with the
            <a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">
            signInWithCustomToken</a> authentication API.
            <para>
            This method attempts to generate a token using:
            <list type="number">
            <item>
            <description>the private key of <see cref="T:FirebaseAdmin.FirebaseApp"/>'s service account
            credentials, if provided at initialization.</description>
            </item>
            <item>
            <description>the IAM service if a service accound ID was specified via
            <see cref="T:FirebaseAdmin.AppOptions"/></description>
            </item>
            <item>
            <description>the local metadata server if the code is deployed in a GCP-managed
            environment.</description>
            </item>
            </list>
            </para>
            </summary>
            <returns>A task that completes with a Firebase custom token.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while creating a custom
            token.</exception>
            <param name="uid">The UID to store in the token. This identifies the user to other
            Firebase services (Realtime Database, Firebase Auth, etc.). Must not be longer than
            128 characters.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a Firebase custom token for the given user ID containing the specified
            additional claims. This token can then be sent back to a client application to be used
            with the
            <a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">
            signInWithCustomToken</a> authentication API.
            <para>This method uses the same mechanisms as
            <see cref="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String)"/> to sign custom tokens.</para>
            </summary>
            <returns>A task that completes with a Firebase custom token.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters. Or, if <paramref name="developerClaims"/> contains any standard
            JWT claims.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while creating a custom
            token.</exception>
            <param name="uid">The UID to store in the token. This identifies the user to other
            Firebase services (Realtime Database, Firebase Auth, etc.). Must not be longer than
            128 characters.</param>
            <param name="developerClaims">Additional claims to be stored in the token, and made
            available to Firebase security rules. These must be serializable to JSON, and must not
            contain any standard JWT claims.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Creates a Firebase custom token for the given user ID containing the specified
            additional claims. This token can then be sent back to a client application to be used
            with the
            <a href="https://firebase.google.com/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">
            signInWithCustomToken</a> authentication API.
            <para>This method uses the same mechanisms as
            <see cref="M:FirebaseAdmin.Auth.FirebaseAuth.CreateCustomTokenAsync(System.String)"/> to sign custom tokens.</para>
            </summary>
            <returns>A task that completes with a Firebase custom token.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters. Or, if <paramref name="developerClaims"/> contains any standard
            JWT claims.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while creating a custom
            token.</exception>
            <param name="uid">The UID to store in the token. This identifies the user to other
            Firebase services (Realtime Database, Firebase Auth, etc.). Must not be longer than
            128 characters.</param>
            <param name="developerClaims">Additional claims to be stored in the token, and made
            available to Firebase security rules. These must be serializable to JSON, and must not
            contain any standard JWT claims.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.VerifyIdTokenAsync(System.String)">
            <summary>
            Parses and verifies a Firebase ID token.
            <para>A Firebase client app can identify itself to a trusted back-end server by sending
            its Firebase ID Token (accessible via the <c>getIdToken()</c> API in the Firebase
            client SDK) with its requests. The back-end server can then use this method
            to verify that the token is valid. This method ensures that the token is correctly
            signed, has not expired, and it was issued against the Firebase project associated with
            this <c>FirebaseAuth</c> instance.</para>
            <para>See <a href="https://firebase.google.com/docs/auth/admin/verify-id-tokens">Verify
            ID Tokens</a> for code samples and detailed documentation.</para>
            </summary>
            <returns>A task that completes with a <see cref="T:FirebaseAdmin.Auth.FirebaseToken"/> representing
            the verified and decoded ID token.</returns>
            <exception cref="T:System.ArgumentException">If ID token argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If the ID token fails to verify.</exception>
            <param name="idToken">A Firebase ID token string to parse and verify.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.VerifyIdTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Parses and verifies a Firebase ID token.
            <para>A Firebase client app can identify itself to a trusted back-end server by sending
            its Firebase ID Token (accessible via the <c>getIdToken()</c> API in the Firebase
            client SDK) with its requests. The back-end server can then use this method
            to verify that the token is valid. This method ensures that the token is correctly
            signed, has not expired, and it was issued against the Firebase project associated with
            this <c>FirebaseAuth</c> instance.</para>
            <para>See <a href="https://firebase.google.com/docs/auth/admin/verify-id-tokens">Verify
            ID Tokens</a> for code samples and detailed documentation.</para>
            </summary>
            <returns>A task that completes with a <see cref="T:FirebaseAdmin.Auth.FirebaseToken"/> representing
            the verified and decoded ID token.</returns>
            <exception cref="T:System.ArgumentException">If ID token argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If the ID token fails to verify.</exception>
            <param name="idToken">A Firebase ID token string to parse and verify.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.GetUserAsync(System.String)">
            <summary>
            Gets a <see cref="T:FirebaseAdmin.Auth.UserRecord"/> object containig information about the user who's
            user ID was specified in <paramref name="uid"/>.
            </summary>
            <param name="uid">The user ID for the user who's data is to be retrieved.</param>
            <returns>A task that completes with a <see cref="T:FirebaseAdmin.Auth.UserRecord"/> representing
            a user with the specified user ID.</returns>
            <exception cref="T:System.ArgumentException">If user ID argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If a user cannot be found with the specified user ID.</exception>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.GetUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:FirebaseAdmin.Auth.UserRecord"/> object containig information about the user who's
            user ID was specified in <paramref name="uid"/>.
            </summary>
            <param name="uid">The user ID for the user who's data is to be retrieved.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A task that completes with a <see cref="T:FirebaseAdmin.Auth.UserRecord"/> representing
            a user with the specified user ID.</returns>
            <exception cref="T:System.ArgumentException">If user ID argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If a user cannot be found with the specified user ID.</exception>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.DeleteUserAsync(System.String)">
            <summary>
            Deletes the user identified by the specified <paramref name="uid"/>.
            </summary>
            <param name="uid">A user ID string.</param>
            <returns>A task that completes when the user account has been deleted.</returns>
            <exception cref="T:System.ArgumentException">If the user ID argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while deleting the user.</exception>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.DeleteUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the user identified by the specified <paramref name="uid"/>.
            </summary>
            <param name="uid">A user ID string.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A task that completes when the user account has been deleted.</returns>
            <exception cref="T:System.ArgumentException">If the user ID argument is null or empty.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while deleting the user.</exception>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.SetCustomUserClaimsAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the specified custom claims on an existing user account. A null claims value
            removes any claims currently set on the user account. The claims must serialize into
            a valid JSON string. The serialized claims must not be larger than 1000 characters.
            </summary>
            <returns>A task that completes when the claims have been set.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters. Or, if the serialized <paramref name="claims"/> is larger than 1000
            characters.</exception>
            <param name="uid">The user ID string for the custom claims will be set. Must not be null
            or longer than 128 characters.
            </param>
            <param name="claims">The claims to be stored on the user account, and made
            available to Firebase security rules. These must be serializable to JSON, and the
            serialized claims should not be larger than 1000 characters.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.SetCustomUserClaimsAsync(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Sets the specified custom claims on an existing user account. A null claims value
            removes any claims currently set on the user account. The claims should serialize into
            a valid JSON string. The serialized claims must not be larger than 1000 characters.
            </summary>
            <returns>A task that completes when the claims have been set.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="uid"/> is null, empty or longer
            than 128 characters. Or, if the serialized <paramref name="claims"/> is larger than 1000
            characters.</exception>
            <param name="uid">The user ID string for the custom claims will be set. Must not be null
            or longer than 128 characters.
            </param>
            <param name="claims">The claims to be stored on the user account, and made
            available to Firebase security rules. These must be serializable to JSON, and after
            serialization it should not be larger than 1000 characters.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseAuth.FirebaseAdmin#IFirebaseService#Delete">
            <summary>
            Deletes this <see cref="T:FirebaseAdmin.Auth.FirebaseAuth"/> service instance.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.FirebaseToken">
            <summary>
            Represents a valid, decoded Firebase ID token. It can be used to get the <c>Uid</c> and
            other claims available in the token.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.Issuer">
            <summary>
            Gets the issuer claim that identifies the principal that issued the JWT.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.Subject">
            <summary>
            Gets the subject claim identifying the principal that is the subject of the JWT.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.Audience">
            <summary>
            Gets the audience claim that identifies the audience that the JWT is intended for.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.ExpirationTimeSeconds">
            <summary>
            Gets the expiration time claim that identifies the expiration time (in seconds)
            on or after which the token MUST NOT be accepted for processing.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.IssuedAtTimeSeconds">
            <summary>
            Gets the issued at claim that identifies the time (in seconds) at which the JWT was
            issued.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.Uid">
            <summary>
            Gets the User ID of the user to which this ID token belongs. This is same as
            <see cref="P:FirebaseAdmin.Auth.FirebaseToken.Subject"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.FirebaseToken.Claims">
            <summary>
            Gets all other claims present in the JWT as a readonly dictionary. This can be used to
            access custom claims of the token.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.FirebaseTokenFactory">
            <summary>
            A helper class that creates Firebase custom tokens.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.FirebaseTokenVerifier">
            <summary>
            A helper class that can be used to verify signed Firebase tokens (e.g. ID tokens).
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseTokenVerifier.VerifySignatureAsync(System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Verifies the integrity of a JWT by validating its signature. The JWT must be specified
            as an array of three segments (header, body and signature).
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.FirebaseUserManager">
            <summary>
            FirebaseUserManager provides methods for interacting with the
            <a href="https://developers.google.com/identity/toolkit/web/reference/relyingparty">
            Google Identity Toolkit</a> via its REST API. This class does not hold any mutable state,
            and is thread safe.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseUserManager.GetUserById(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the user data corresponding to the given user ID.
            </summary>
            <param name="uid">A user ID string.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A record of user with the queried id if one exists.</returns>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseUserManager.UpdateUserAsync(FirebaseAdmin.Auth.UserArgs,System.Threading.CancellationToken)">
            <summary>
            Update an existing user.
            </summary>
            <exception cref="T:FirebaseAdmin.FirebaseException">If the server responds that cannot update the user.</exception>
            <param name="args">The user account data to be updated.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.FirebaseUserManager.DeleteUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Delete user data corresponding to the given user ID.
            </summary>
            <param name="uid">A user ID string.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="T:FirebaseAdmin.Auth.FixedAccountIAMSigner">
            <summary>
            An <see cref="T:FirebaseAdmin.Auth.ISigner"/> implementation that uses the IAM service to sign data. Unlike
            <see cref="T:FirebaseAdmin.Auth.IAMSigner"/> this class does not attempt to auto discover a service account ID.
            Insterad it must be initialized with a fixed service account ID string.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.GetAccountInfoResponse">
            <summary>
            JSON data binding for GetAccountInfoResponse messages sent by Google identity toolkit service.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Kind">
            <summary>
            Gets or sets a string representing what kind of account is represented by this object.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Users">
            <summary>
            Gets or sets a list of provider users linked to this account.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.GetAccountInfoResponse.User">
            <summary>
            JSON data binding for user records.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.UserId">
            <summary>
            Gets or sets the user's ID.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.Email">
            <summary>
            Gets or sets the user's email address.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.PhoneNumber">
            <summary>
            Gets or sets the user's phone number.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.EmailVerified">
            <summary>
            Gets or sets a value indicating whether the user's email address is verified or not.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.DisplayName">
            <summary>
            Gets or sets the user's display name.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.PhotoUrl">
            <summary>
            Gets or sets the URL for the user's photo.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.Disabled">
            <summary>
            Gets or sets a value indicating whether the user is disabled or not.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.Providers">
            <summary>
            Gets or sets a list of provider-specified data for this user.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.CreatedAt">
            <summary>
            Gets or sets the timestamp representing the time that the user account was created.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.LastLoginAt">
            <summary>
            Gets or sets the timestamp representing the last time that the user has logged in.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.ValidSince">
            <summary>
            Gets or sets the timestamp representing the time that the user account was first valid.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.User.CustomClaims">
            <summary>
            Gets or sets the user's custom claims.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider">
            <summary>
            JSON data binding for provider data.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.UserId">
            <summary>
            Gets or sets the user's ID.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.DisplayName">
            <summary>
            Gets or sets the user's display name.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.Email">
            <summary>
            Gets or sets the user's email address.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.PhoneNumber">
            <summary>
            Gets or sets the user's phone number.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.PhotoUrl">
            <summary>
            Gets or sets the URL for the user's photo.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.GetAccountInfoResponse.Provider.ProviderID">
            <summary>
            Gets or sets the provider's ID.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.HttpPublicKeySource">
            <summary>
            An <see cref="T:FirebaseAdmin.Auth.IPublicKeySource"/> implementation that retrieves public keys from a remote
            HTTP server. Retrieved keys are cached in memory according to the HTTP cache-control
            directive.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IAMSigner">
            <summary>
            An <see cref="T:FirebaseAdmin.Auth.ISigner"/> implementation that uses the
            <a href="https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob">IAM
            service</a> to sign data. The IAM
            service must be called with a service account ID, and this class attempts to auto
            discover a service account ID by contacting the local metadata service present in
            Google-managed runtimes.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IAMSigner.SignBlobRequest">
            <summary>
            Represents the sign request sent to the remote IAM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IAMSigner.SignBlobResponse">
            <summary>
            Represents the sign response sent by the remote IAM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IAMSigner.SignBlobError">
            <summary>
            Represents an error response sent by the remote IAM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IAMSigner.SignBlobErrorDetail">
            <summary>
            Represents the error details embedded in an IAM error response.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.IPublicKeySource">
            <summary>
            An object that can be used to retrieve a set of RSA public keys for verifying signatures.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.IPublicKeySource.GetPublicKeysAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a set of public keys.
            </summary>
            <returns>A task that completes with a list of public keys.</returns>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="T:FirebaseAdmin.Auth.ISigner">
            <summary>
            Represents an object can be used to cryptographically sign data. Mainly used for signing
            custom JWT tokens issued to Firebase users.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.ISigner.GetKeyIdAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the ID (client email) of the service account used to sign payloads.
            </summary>
            <returns>A task that completes with the key ID string.</returns>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Auth.ISigner.SignDataAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Signs the given data payload.
            </summary>
            <returns>A task that completes with the crypto signature.</returns>
            <param name="data">A byte array of data to be signed.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="T:FirebaseAdmin.Auth.IUserInfo">
            <summary>
            A collection of standard profile information for a user. Used to expose profile information
            returned by an identity provider.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.Uid">
            <summary>
            Gets the user's unique ID assigned by the identity provider.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.DisplayName">
            <summary>
            Gets the user's display name, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.Email">
            <summary>
            Gets the user's email address, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.PhoneNumber">
            <summary>
            Gets the user's phone number, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.PhotoUrl">
            <summary>
            Gets the user's photo URL, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.IUserInfo.ProviderId">
            <summary>
            Gets the ID of the identity provider. This can be a short domain name (e.g. google.com) or
            the identifier of an OpenID identity provider.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.JwtUtils">
            <summary>
            A collection of utilities for encoding and decoding JWTs.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.JwtUtils.Decode``1(System.String)">
            <summary>
            Decodes a single JWT segment, and deserializes it into a value of type
            <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the decoded result.</typeparam>
            <returns>Decoded JWT segment as a value of type <typeparamref name="T"/>.</returns>
            <param name="value">JWT segment to be decoded.</param>
        </member>
        <member name="T:FirebaseAdmin.Auth.ProviderUserInfo">
            <summary>
            Contains metadata regarding how a user is known by a particular identity provider (IdP).
            Instances of this class are immutable and thread safe.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.ProviderUserInfo.#ctor(FirebaseAdmin.Auth.GetAccountInfoResponse.Provider)">
            <summary>
            Initializes a new instance of the <see cref="T:FirebaseAdmin.Auth.ProviderUserInfo"/> class with data provided by an authentication provider.
            </summary>
            <param name="provider">The deserialized JSON user data from the provider.</param>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.Uid">
            <summary>
            Gets the user's unique ID assigned by the identity provider.
            </summary>
            <returns>a user ID string.</returns>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.DisplayName">
            <summary>
            Gets the user's display name, if available.
            </summary>
            <returns>a display name string or null.</returns>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.Email">
            <summary>
            Gets the user's email address, if available.
            </summary>
            <returns>an email address string or null.</returns>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.PhoneNumber">
            <summary>
            Gets the user's phone number.
            </summary>
            <returns>a phone number string or null.</returns>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.PhotoUrl">
            <summary>
            Gets the user's photo URL, if available.
            </summary>
            <returns>a URL string or null.</returns>
        </member>
        <member name="P:FirebaseAdmin.Auth.ProviderUserInfo.ProviderId">
            <summary>
            Gets the ID of the identity provider. This can be a short domain name (e.g. google.com) or
            the identifier of an OpenID identity provider.
            </summary>
            <returns>an ID string that uniquely identifies the identity provider.</returns>
        </member>
        <member name="T:FirebaseAdmin.Auth.PublicKey">
            <summary>
            Represents an RSA public key, which can be used to verify signatures.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.PublicKey.Id">
            <summary>
            Gets the unique identifier of this key.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.PublicKey.RSA">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/> instance containing the contents of
            the public key.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.ServiceAccountSigner">
            <summary>
            An <see cref="T:FirebaseAdmin.Auth.ISigner"/> implementation that uses service account credentials to sign
            data. Uses the private key present in the credential to produce signatures.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.UserMetadata">
            <summary>
            Contains additional metadata associated with a user account.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.UserMetadata.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FirebaseAdmin.Auth.UserMetadata"/> class with the specified creation and last sign-in timestamps.
            </summary>
            <param name="creationTimestamp">A timestamp representing the date and time that the user account was created.</param>
            <param name="lastSignInTimestamp">A timestamp representing the date and time that the user account was last signed-on to.</param>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserMetadata.CreationTimestamp">
            <summary>
            Gets a timestamp representing the date and time that the account was created.
            If not available this property is <c>null</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserMetadata.LastSignInTimestamp">
            <summary>
            Gets a timestamp representing the last time that the user has signed in. If the user
            has never signed in this property is <c>null</c>.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Auth.UserRecord">
            <summary>
            Contains metadata associated with a Firebase user account. Instances
            of this class are immutable and thread safe.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Auth.UserRecord.#ctor(FirebaseAdmin.Auth.GetAccountInfoResponse.User)">
            <summary>
            Initializes a new instance of the <see cref="T:FirebaseAdmin.Auth.UserRecord"/> class from an existing instance of the
            <see cref="T:FirebaseAdmin.Auth.GetAccountInfoResponse.User"/> class.
            </summary>
            <param name="user">The <see cref="T:FirebaseAdmin.Auth.GetAccountInfoResponse.User"/> instance to copy the user's data
            from.</param>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.Uid">
            <summary>
            Gets the user ID of this user.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.DisplayName">
            <summary>
            Gets the user's display name, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.Email">
            <summary>
            Gets the user's email address, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.PhoneNumber">
            <summary>
            Gets the user's phone number, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.PhotoUrl">
            <summary>
            Gets the user's photo URL, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.ProviderId">
            <summary>
            Gets the ID of the identity provider. This returns the constant value <c>firebase</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.EmailVerified">
            <summary>
            Gets a value indicating whether the user's email address is verified or not.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.Disabled">
            <summary>
            Gets a value indicating whether the user account is disabled or not.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.ProviderData">
            <summary>
            Gets a non-null array of provider data for this user. Possibly empty.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.TokensValidAfterTimestamp">
            <summary>
            Gets a timestamp that indicates the earliest point in time at which a valid ID token
            could have been issued to this user. Tokens issued prior to this timestamp are
            considered invalid.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.UserMetaData">
            <summary>
            Gets additional user metadata. This is guaranteed not to be null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Auth.UserRecord.CustomClaims">
            <summary>
            Gets the custom claims set on this user, as a non-null dictionary. Possibly empty.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Extensions">
            <summary>
            A collection of extension methods for internal use in the SDK.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Extensions.ToServiceAccountCredential(Google.Apis.Auth.OAuth2.GoogleCredential)">
            <summary>
            Extracts and returns the underlying <see cref="T:Google.Apis.Auth.OAuth2.ServiceAccountCredential"/> from a
            <see cref="T:Google.Apis.Auth.OAuth2.GoogleCredential"/>. Returns null if the <c>GoogleCredential</c> is not
            based on a service account.
            </summary>
            <returns>A service account credential if available, or null.</returns>
            <param name="credential">The Google credential from which to extract service account
            credentials.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.CreateDefaultHttpClient(Google.Apis.Http.HttpClientFactory)">
            <summary>
            Creates a default (unauthenticated) <see cref="T:Google.Apis.Http.ConfigurableHttpClient"/> from the
            factory.
            </summary>
            <returns>An HTTP client that can be used to make unauthenticated requests.</returns>
            <param name="clientFactory">The <see cref="T:Google.Apis.Http.HttpClientFactory"/> used to create
            the HTTP client.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.CreateAuthorizedHttpClient(Google.Apis.Http.HttpClientFactory,Google.Apis.Auth.OAuth2.GoogleCredential)">
            <summary>
            Creates an authenticated <see cref="T:Google.Apis.Http.ConfigurableHttpClient"/> from the
            factory.
            </summary>
            <returns>An HTTP client that can be used to OAuth2 authorized requests.</returns>
            <param name="clientFactory">The <see cref="T:Google.Apis.Http.HttpClientFactory"/> used to create
            the HTTP client.</param>
            <param name="credential">The Google credential that will be used to authenticate
            outgoing HTTP requests.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.PostJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Makes a JSON POST request using the given parameters.
            </summary>
            <returns>An <see cref="T:System.Net.Http.HttpRequestMessage"/> representing the response to the
            POST request.</returns>
            <typeparam name="T">Type of the object that will be serialized into JSON.</typeparam>
            <param name="client">The <see cref="T:System.Net.Http.HttpClient"/> used to make the request.</param>
            <param name="requestUri">URI for the outgoing request.</param>
            <param name="body">The object that will be serialized as the JSON body.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.CreateJsonHttpContent(Google.Apis.Json.NewtonsoftJsonSerializer,System.Object)">
            <summary>
            Serializes the <paramref name="body"/> into JSON, and wraps the result in an instance
            of <see cref="T:System.Net.Http.HttpContent"/>, which can be included in an outgoing HTTP request.
            </summary>
            <returns>An instance of <see cref="T:System.Net.Http.HttpContent"/> containing the JSON representation
            of <paramref name="body"/>.</returns>
            <param name="serializer">The JSON serializer to serialize the given object.</param>
            <param name="body">The object that will be serialized into JSON.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.UnixTimestamp(Google.Apis.Util.IClock)">
            <summary>
            Returns a Unix-styled timestamp (seconds from epoch) from the <see cref="T:Google.Apis.Util.IClock"/>.
            </summary>
            <returns>Number of seconds since epoch.</returns>
            <param name="clock">The <see cref="T:Google.Apis.Util.IClock"/> used to generate the timestamp.</param>
        </member>
        <member name="M:FirebaseAdmin.Extensions.DisposeIfCreated``1(System.Lazy{``0})">
            <summary>
            Disposes a lazy-initialized object if the object has already been created.
            </summary>
            <param name="lazy">The lazy initializer containing a disposable object.</param>
            <typeparam name="T">Type of the object that needs to be disposed.</typeparam>
        </member>
        <member name="M:FirebaseAdmin.Extensions.Copy``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a shallow copy of a collection of key-value pairs.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.FirebaseApp">
            <summary>
            This is the entry point to the Firebase Admin SDK. It holds configuration and state common
            to all APIs exposed from the SDK.
            <para>Use one of the provided <c>Create()</c> methods to obtain a new instance.
            See <a href="https://firebase.google.com/docs/admin/setup#initialize_the_sdk">
            Initialize the SDK</a> for code samples and detailed documentation.</para>
            </summary>
        </member>
        <member name="P:FirebaseAdmin.FirebaseApp.DefaultInstance">
            <summary>
            Gets the default app instance. This property is <c>null</c> if the default app instance
            doesn't yet exist.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.FirebaseApp.Options">
            <summary>
            Gets a copy of the <see cref="T:FirebaseAdmin.AppOptions"/> this app was created with.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.FirebaseApp.Name">
            <summary>
            Gets the name of this app.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.GetInstance(System.String)">
            <summary>
            Returns the app instance identified by the given name.
            </summary>
            <returns>The <see cref="T:FirebaseAdmin.FirebaseApp"/> instance with the specified name or null if it
            doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">If the name argument is null or empty.</exception>
            <param name="name">Name of the app to retrieve.</param>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.Create">
            <summary>
            Creates the default app instance with Google Application Default Credentials.
            </summary>
            <returns>The newly created <see cref="T:FirebaseAdmin.FirebaseApp"/> instance.</returns>
            <exception cref="T:System.ArgumentException">If the default app instance already
            exists.</exception>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.Create(System.String)">
            <summary>
            Creates an app with the specified name, and Google Application Default Credentials.
            </summary>
            <returns>The newly created <see cref="T:FirebaseAdmin.FirebaseApp"/> instance.</returns>
            <exception cref="T:System.ArgumentException">If the default app instance already
            exists.</exception>
            <param name="name">Name of the app.</param>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.Create(FirebaseAdmin.AppOptions)">
            <summary>
            Creates the default app instance with the specified options.
            </summary>
            <returns>The newly created <see cref="T:FirebaseAdmin.FirebaseApp"/> instance.</returns>
            <exception cref="T:System.ArgumentException">If the default app instance already
            exists.</exception>
            <param name="options">Options to create the app with. Must at least contain the
            <c>Credential</c>.</param>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.Create(FirebaseAdmin.AppOptions,System.String)">
            <summary>
            Creates an app with the specified name and options.
            </summary>
            <returns>The newly created <see cref="T:FirebaseAdmin.FirebaseApp"/> instance.</returns>
            <exception cref="T:System.ArgumentException">If the default app instance already
            exists.</exception>
            <param name="options">Options to create the app with. Must at least contain the
            <c>Credential</c>.</param>
            <param name="name">Name of the app.</param>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.Delete">
            <summary>
            Deletes this app instance and cleans up any state associated with it. Once an app has
            been deleted, accessing any services related to it will result in an exception.
            If the app is already deleted, this method is a no-op.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.DeleteAll">
            <summary>
            Deleted all the apps created so far. Used for unit testing.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.GetSdkVersion">
            <summary>
            Returns the current version of the .NET assembly.
            </summary>
            <returns>A version string in major.minor.patch format.</returns>
        </member>
        <member name="M:FirebaseAdmin.FirebaseApp.GetProjectId">
            <summary>
            Returns the Google Cloud Platform project ID associated with this Firebase app. If a
            project ID is specified in <see cref="T:FirebaseAdmin.AppOptions"/>, that value is returned. If not
            attempts to determine a project ID from the <see cref="T:Google.Apis.Auth.OAuth2.GoogleCredential"/> used to
            initialize the app. Looks up the GOOGLE_CLOUD_PROJECT environment variable when all
            else fails.
            </summary>
            <returns>A project ID string or null.</returns>
        </member>
        <member name="T:FirebaseAdmin.FirebaseException">
            <summary>
            Common error type for all exceptions raised by Firebase APIs.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.IFirebaseService">
            <summary>
            A stateful service that can be associated with an <see cref="T:FirebaseAdmin.FirebaseApp"/>. This
            interface enables tearing down the service when the parent app instance is deleted.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.IFirebaseService.Delete">
            <summary>
            Cleans up any state associated with this service making it unsuitable for further use.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Action">
            <summary>
            Represents an action available to users when the notification is presented.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.Action.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FirebaseAdmin.Messaging.Action"/> class.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Action.ActionName">
            <summary>
            Gets or sets the name of the Action.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Action.Title">
            <summary>
            Gets or sets the title text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Action.Icon">
            <summary>
            Gets or sets the icon URL.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.AndroidConfig">
            <summary>
            Represents the Android-specific options that can be included in a <see cref="T:FirebaseAdmin.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.CollapseKey">
            <summary>
            Gets or sets a collapse key for the message. Collapse key serves as an identifier for a
            group of messages that can be collapsed, so that only the last message gets sent when
            delivery can be resumed. A maximum of 4 different collapse keys may be active at any
            given time.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.Priority">
            <summary>
            Gets or sets the priority of the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.TimeToLive">
            <summary>
            Gets or sets the time-to-live duration of the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.RestrictedPackageName">
            <summary>
            Gets or sets the package name of the application where the registration tokens must
            match in order to receive the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.Data">
            <summary>
            Gets or sets a collection of key-value pairs that will be added to the message as data
            fields. Keys and the values must not be null. When set, overrides any data fields set
            on the top-level
            <see cref="T:FirebaseAdmin.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.Notification">
            <summary>
            Gets or sets the Android notification to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.PriorityString">
            <summary>
            Gets or sets the string representation of <see cref="P:FirebaseAdmin.Messaging.AndroidConfig.Priority"/> as accepted by the FCM
            backend service.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidConfig.TtlString">
            <summary>
            Gets or sets the string representation of <see cref="P:FirebaseAdmin.Messaging.AndroidConfig.TimeToLive"/> as accepted by the
            FCM backend service. The string ends in the suffix "s" (indicating seconds) and is
            preceded by the number of seconds, with nanoseconds expressed as fractional seconds.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.AndroidConfig.CopyAndValidate">
            <summary>
            Copies this Android config, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.AndroidNotification">
            <summary>
            Represents the Android-specific notification options that can be included in a
            <see cref="T:FirebaseAdmin.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Title">
            <summary>
            Gets or sets the title of the Android notification. When provided, overrides the title
            set via <see cref="P:FirebaseAdmin.Messaging.Notification.Title"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Body">
            <summary>
            Gets or sets the title of the Android notification. When provided, overrides the title
            set via <see cref="P:FirebaseAdmin.Messaging.Notification.Body"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Icon">
            <summary>
            Gets or sets the icon of the Android notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Color">
            <summary>
            Gets or sets the notification icon color. Must be of the form <c>#RRGGBB</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Sound">
            <summary>
            Gets or sets the sound to be played when the device receives the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.Tag">
            <summary>
            Gets or sets the notification tag. This is an identifier used to replace existing
            notifications in the notification drawer. If not specified, each request creates a new
            notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.ClickAction">
            <summary>
            Gets or sets the action associated with a user click on the notification. If specified,
            an activity with a matching Intent Filter is launched when a user clicks on the
            notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.TitleLocKey">
            <summary>
            Gets or sets the key of the title string in the app's string resources to use to
            localize the title text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.TitleLocArgs">
            <summary>
            Gets or sets the collection of resource key strings that will be used in place of the
            format specifiers in <see cref="P:FirebaseAdmin.Messaging.AndroidNotification.TitleLocKey"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.BodyLocKey">
            <summary>
            Gets or sets the key of the body string in the app's string resources to use to
            localize the body text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.BodyLocArgs">
            <summary>
            Gets or sets the collection of resource key strings that will be used in place of the
            format specifiers in <see cref="P:FirebaseAdmin.Messaging.AndroidNotification.BodyLocKey"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.AndroidNotification.ChannelId">
            <summary>
            Gets or sets the Android notification channel ID (new in Android O). The app must
            create a channel with this channel ID before any notification with this channel ID is
            received. If you don't send this channel ID in the request, or if the channel ID
            provided has not yet been created by the app, FCM uses the channel ID specified in the
            app manifest.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.AndroidNotification.CopyAndValidate">
            <summary>
            Copies this notification, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.ApnsConfig">
            <summary>
            Represents the APNS-specific options that can be included in a <see cref="T:FirebaseAdmin.Messaging.Message"/>. Refer
            to <see href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html">
            APNs documentation</see> for various headers and payload fields supported by APNS.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApnsConfig.Headers">
            <summary>
            Gets or sets the APNs headers.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApnsConfig.Aps">
            <summary>
            Gets or sets the <c>aps</c> dictionary to be included in the APNs payload.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApnsConfig.CustomData">
            <summary>
            Gets or sets a collection of arbitrary key-value data that will be included in the APNs
            payload.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApnsConfig.Payload">
            <summary>
            Gets or sets the APNs payload as accepted by the FCM backend servers.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.ApnsConfig.CopyAndValidate">
            <summary>
            Copies this APNs config, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.ApnsConfig.ApnsPayload">
            <summary>
            The APNs payload object as expected by the FCM backend service.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.ApnsConfig.ApnsPayload.CopyAndValidate">
            <summary>
            Copies this APNs payload, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Aps">
            <summary>
            Represents the <see href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html">
            aps dictionary</see> that is part of every APNs message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.Alert">
            <summary>
            Gets or sets an advanced alert configuration to be included in the message. It is an
            error to set both <see cref="P:FirebaseAdmin.Messaging.Aps.Alert"/> and <see cref="P:FirebaseAdmin.Messaging.Aps.AlertString"/> properties
            together.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.AlertString">
            <summary>
            Gets or sets the alert text to be included in the message. To specify a more advanced
            alert configuration, use the <see cref="P:FirebaseAdmin.Messaging.Aps.Alert"/> property instead. It is an error to
            set both <see cref="P:FirebaseAdmin.Messaging.Aps.Alert"/> and <see cref="P:FirebaseAdmin.Messaging.Aps.AlertString"/> properties together.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.Badge">
            <summary>
            Gets or sets the badge to be displayed with the message. Set to 0 to remove the badge.
            When not specified, the badge will remain unchanged.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.Sound">
            <summary>
            Gets or sets the name of a sound file in your app's main bundle or in the
            <c>Library/Sounds</c> folder of your app's container directory. Specify the
            string <c>default</c> to play the system sound. It is an error to set both
            <see cref="P:FirebaseAdmin.Messaging.Aps.Sound"/> and <see cref="P:FirebaseAdmin.Messaging.Aps.CriticalSound"/> properties together.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.CriticalSound">
            <summary>
            Gets or sets the critical alert sound to be played with the message. It is an error to
            set both <see cref="P:FirebaseAdmin.Messaging.Aps.Sound"/> and <see cref="P:FirebaseAdmin.Messaging.Aps.CriticalSound"/> properties together.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.ContentAvailable">
            <summary>
            Gets or sets a value indicating whether to configure a background update notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.MutableContent">
            <summary>
            Gets or sets a value indicating whether to include the <c>mutable-content</c> property
            in the message. When set, this property allows clients to modify the notification via
            app extensions.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.Category">
            <summary>
            Gets or sets the type of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.ThreadId">
            <summary>
            Gets or sets the app-specific identifier for grouping notifications.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.CustomData">
            <summary>
            Gets or sets a collection of arbitrary key-value data to be included in the <c>aps</c>
            dictionary. This is exposed as an <see cref="T:System.Collections.Generic.IDictionary`2"/> to support
            correct deserialization of custom properties.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.AlertObject">
            <summary>
            Gets or sets the alert configuration of the <c>aps</c> dictionary. Read from either
            <see cref="P:FirebaseAdmin.Messaging.Aps.Alert"/> or <see cref="P:FirebaseAdmin.Messaging.Aps.AlertString"/> property.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.SoundObject">
            <summary>
            Gets or sets the sound configuration of the <c>aps</c> dictionary. Read from either
            <see cref="P:FirebaseAdmin.Messaging.Aps.Sound"/> or <see cref="P:FirebaseAdmin.Messaging.Aps.CriticalSound"/> property.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.ContentAvailableInt">
            <summary>
            Gets or sets the integer representation of the <see cref="P:FirebaseAdmin.Messaging.Aps.ContentAvailable"/> property,
            which is how APNs expects it.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Aps.MutableContentInt">
            <summary>
            Gets or sets the integer representation of the <see cref="P:FirebaseAdmin.Messaging.Aps.MutableContent"/> property,
            which is how APNs expects it.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.Aps.CopyAndValidate">
            <summary>
            Copies this Aps dictionary, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM and APNs services.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.ApsAlert">
            <summary>
            Represents the <see href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html#//apple_ref/doc/uid/TP40008194-CH17-SW5">
            alert property</see> that can be included in the <c>aps</c> dictionary of an APNs
            payload.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.Title">
            <summary>
            Gets or sets the title of the alert. When provided, overrides the title set via
            <see cref="P:FirebaseAdmin.Messaging.Notification.Title"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.Subtitle">
            <summary>
            Gets or sets the subtitle of the alert.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.Body">
            <summary>
            Gets or sets the body of the alert. When provided, overrides the body set via
            <see cref="P:FirebaseAdmin.Messaging.Notification.Body"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.LocKey">
            <summary>
            Gets or sets the key of the body string in the app's string resources to use to
            localize the body text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.LocArgs">
            <summary>
            Gets or sets the resource key strings that will be used in place of the format
            specifiers in <see cref="P:FirebaseAdmin.Messaging.ApsAlert.LocKey"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.TitleLocKey">
            <summary>
            Gets or sets the key of the title string in the app's string resources to use to
            localize the title text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.TitleLocArgs">
            <summary>
            Gets or sets the resource key strings that will be used in place of the format
            specifiers in <see cref="P:FirebaseAdmin.Messaging.ApsAlert.TitleLocKey"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.SubtitleLocKey">
            <summary>
            Gets or sets the key of the subtitle string in the app's string resources to use to
            localize the subtitle text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.SubtitleLocArgs">
            <summary>
            Gets or sets the resource key strings that will be used in place of the format
            specifiers in <see cref="P:FirebaseAdmin.Messaging.ApsAlert.SubtitleLocKey"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.ActionLocKey">
            <summary>
            Gets or sets the key of the text in the app's string resources to use to localize the
            action button text.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.ApsAlert.LaunchImage">
            <summary>
            Gets or sets the launch image for the notification action.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.ApsAlert.CopyAndValidate">
            <summary>
            Copies this alert dictionary, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM and APNs services.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.BatchResponse">
            <summary>
            Response from an operation that sends FCM messages to multiple recipients.
            See <see cref="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendMulticastAsync(FirebaseAdmin.Messaging.MulticastMessage)"/>.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.BatchResponse.#ctor(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.SendResponse})">
            <summary>
            Initializes a new instance of the <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> class.
            </summary>
            <param name="responses">The responses.</param>
        </member>
        <member name="P:FirebaseAdmin.Messaging.BatchResponse.Responses">
            <summary>
            Gets information about all responses for the batch.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.BatchResponse.SuccessCount">
            <summary>
            Gets a count of how many of the responses in <see cref="P:FirebaseAdmin.Messaging.BatchResponse.Responses"/> were
            successful.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.BatchResponse.FailureCount">
            <summary>
            Gets a count of how many of the responses in <see cref="P:FirebaseAdmin.Messaging.BatchResponse.Responses"/> were
            unsuccessful.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.CriticalSound">
            <summary>
            The sound configuration for APNs critical alerts.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.CriticalSound.Critical">
            <summary>
            Gets or sets a value indicating whether to set the critical alert flag on the sound
            configuration.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.CriticalSound.Name">
            <summary>
            Gets or sets the name of the sound to be played. This should be a sound file in your
            app's main bundle or in the <c>Library/Sounds</c> folder of your app's container
            directory. Specify the string <c>default</c> to play the system sound.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.CriticalSound.Volume">
            <summary>
            Gets or sets the volume for the critical alert's sound. Must be a value between 0.0
            (silent) and 1.0 (full volume).
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.CriticalSound.CriticalInt">
            <summary>
            Gets or sets the integer representation of the <see cref="P:FirebaseAdmin.Messaging.CriticalSound.Critical"/> property, which
            is how APNs expects it.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.CriticalSound.CopyAndValidate">
            <summary>
            Copies this critical sound configuration, and validates the content of it to ensure
            that it can be serialized into the JSON format expected by the FCM and APNs services.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Direction">
            <summary>
            Different directions a notification can be displayed in.
            </summary>
        </member>
        <member name="F:FirebaseAdmin.Messaging.Direction.Auto">
            <summary>
            Direction automatically determined.
            </summary>
        </member>
        <member name="F:FirebaseAdmin.Messaging.Direction.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:FirebaseAdmin.Messaging.Direction.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.FirebaseMessaging">
            <summary>
            This is the entry point to all server-side Firebase Cloud Messaging (FCM) operations. You
            can get an instance of this class via <c>FirebaseMessaging.DefaultInstance</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.FirebaseMessaging.DefaultInstance">
            <summary>
            Gets the messaging instance associated with the default Firebase app. This property is
            <c>null</c> if the default app doesn't yet exist.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.GetMessaging(FirebaseAdmin.FirebaseApp)">
            <summary>
            Returns the messaging instance for the specified app.
            </summary>
            <returns>The <see cref="T:FirebaseAdmin.Messaging.FirebaseMessaging"/> instance associated with the specified
            app.</returns>
            <exception cref="T:System.ArgumentNullException">If the app argument is null.</exception>
            <param name="app">An app instance.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message)">
            <summary>
            Sends a message to the FCM service for delivery. The message gets validated both by
            the Admin SDK, and the remote FCM service. A successful return value indicates
            that the message has been successfully sent to FCM, where it has been accepted by the
            FCM service.
            </summary>
            <returns>A task that completes with a message ID string, which represents
            successful handoff to FCM.</returns>
            <exception cref="T:System.ArgumentNullException">If the message argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the message contains any invalid
            fields.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while sending the
            message.</exception>
            <param name="message">The message to be sent. Must not be null.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the FCM service for delivery. The message gets validated both by
            the Admin SDK, and the remote FCM service. A successful return value indicates
            that the message has been successfully sent to FCM, where it has been accepted by the
            FCM service.
            </summary>
            <returns>A task that completes with a message ID string, which represents
            successful handoff to FCM.</returns>
            <exception cref="T:System.ArgumentNullException">If the message argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the message contains any invalid
            fields.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while sending the
            message.</exception>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message,System.Boolean)">
            <summary>
            Sends a message to the FCM service for delivery. The message gets validated both by
            the Admin SDK, and the remote FCM service. A successful return value indicates
            that the message has been successfully sent to FCM, where it has been accepted by the
            FCM service.
            <para>If the <paramref name="dryRun"/> option is set to true, the message will not be
            actually sent to the recipients. Instead, the FCM service performs all the necessary
            validations, and emulates the send operation. This is a good way to check if a
            certain message will be accepted by FCM for delivery.</para>
            </summary>
            <returns>A task that completes with a message ID string, which represents
            successful handoff to FCM.</returns>
            <exception cref="T:System.ArgumentNullException">If the message argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the message contains any invalid
            fields.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while sending the
            message.</exception>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the FCM service for delivery. The message gets validated both by
            the Admin SDK, and the remote FCM service. A successful return value indicates
            that the message has been successfully sent to FCM, where it has been accepted by the
            FCM service.
            <para>If the <paramref name="dryRun"/> option is set to true, the message will not be
            actually sent to the recipients. Instead, the FCM service performs all the necessary
            validations, and emulates the send operation. This is a good way to check if a
            certain message will be accepted by FCM for delivery.</para>
            </summary>
            <returns>A task that completes with a message ID string, which represents
            successful handoff to FCM.</returns>
            <exception cref="T:System.ArgumentNullException">If the message argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the message contains any invalid
            fields.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while sending the
            message.</exception>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAllAsync(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.Message})">
            <summary>
            Sends all the messages in the given list via Firebase Cloud Messaging. Employs batching to
            send the entire list as a single RPC call. Compared to the <see cref="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message)"/>
            method, this is a significantly more efficient way to send multiple messages.
            </summary>
            <param name="messages">Up to 100 messages to send in the batch. Cannot be null.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAllAsync(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.Message},System.Threading.CancellationToken)">
            <summary>
            Sends all the messages in the given list via Firebase Cloud Messaging. Employs batching to
            send the entire list as a single RPC call. Compared to the <see cref="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message)"/>
            method, this is a significantly more efficient way to send multiple messages.
            </summary>
            <param name="messages">Up to 100 messages to send in the batch. Cannot be null.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAllAsync(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.Message},System.Boolean)">
            <summary>
            Sends all the messages in the given list via Firebase Cloud Messaging. Employs batching to
            send the entire list as a single RPC call. Compared to the <see cref="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message)"/>
            method, this is a significantly more efficient way to send multiple messages.
            </summary>
            <param name="messages">Up to 100 messages to send in the batch. Cannot be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAllAsync(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.Message},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends all the messages in the given list via Firebase Cloud Messaging. Employs batching to
            send the entire list as a single RPC call. Compared to the <see cref="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendAsync(FirebaseAdmin.Messaging.Message)"/>
            method, this is a significantly more efficient way to send multiple messages.
            </summary>
            <param name="messages">Up to 100 messages to send in the batch. Cannot be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendMulticastAsync(FirebaseAdmin.Messaging.MulticastMessage)">
            <summary>
            Sends the given multicast message to all the FCM registration tokens specified in it.
            </summary>
            <param name="message">The message to be sent. Must not be null.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendMulticastAsync(FirebaseAdmin.Messaging.MulticastMessage,System.Threading.CancellationToken)">
            <summary>
            Sends the given multicast message to all the FCM registration tokens specified in it.
            </summary>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendMulticastAsync(FirebaseAdmin.Messaging.MulticastMessage,System.Boolean)">
            <summary>
            Sends the given multicast message to all the FCM registration tokens specified in it.
            <para>If the <paramref name="dryRun"/> option is set to true, the message will not be
            actually sent to the recipients. Instead, the FCM service performs all the necessary
            validations, and emulates the send operation. This is a good way to check if a
            certain message will be accepted by FCM for delivery.</para>
            </summary>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.SendMulticastAsync(FirebaseAdmin.Messaging.MulticastMessage,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends the given multicast message to all the FCM registration tokens specified in it.
            <para>If the <paramref name="dryRun"/> option is set to true, the message will not be
            actually sent to the recipients. Instead, the FCM service performs all the necessary
            validations, and emulates the send operation. This is a good way to check if a
            certain message will be accepted by FCM for delivery.</para>
            </summary>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> containing details of the batch operation's
            outcome.</returns>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessaging.FirebaseAdmin#IFirebaseService#Delete">
            <summary>
            Deletes this <see cref="T:FirebaseAdmin.Messaging.FirebaseMessaging"/> service instance.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.FirebaseMessagingClient">
            <summary>
            A client for making authorized HTTP calls to the FCM backend service. Handles request
            serialization, response parsing, and HTTP error handling.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessagingClient.SendAsync(FirebaseAdmin.Messaging.Message,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the FCM service for delivery. The message gets validated both by
            the Admin SDK, and the remote FCM service. A successful return value indicates
            that the message has been successfully sent to FCM, where it has been accepted by the
            FCM service.
            </summary>
            <returns>A task that completes with a message ID string, which represents
            successful handoff to FCM.</returns>
            <exception cref="T:System.ArgumentNullException">If the message argument is null.</exception>
            <exception cref="T:System.ArgumentException">If the message contains any invalid
            fields.</exception>
            <exception cref="T:FirebaseAdmin.FirebaseException">If an error occurs while sending the
            message.</exception>
            <param name="message">The message to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the message will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
        </member>
        <member name="M:FirebaseAdmin.Messaging.FirebaseMessagingClient.SendAllAsync(System.Collections.Generic.IEnumerable{FirebaseAdmin.Messaging.Message},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends all messages in a single batch.
            </summary>
            <param name="messages">The messages to be sent. Must not be null.</param>
            <param name="dryRun">A boolean indicating whether to perform a dry run (validation
            only) of the send. If set to true, the messages will be sent to the FCM backend service,
            but it will not be delivered to any actual recipients.</param>
            <param name="cancellationToken">A cancellation token to monitor the asynchronous
            operation.</param>
            <returns>A task that completes with a <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/>, giving details about
            the batch operation.</returns>
        </member>
        <member name="T:FirebaseAdmin.Messaging.FirebaseMessagingClient.SendRequest">
            <summary>
            Represents the envelope message accepted by the FCM backend service, including the message
            payload and other options like <c>validate_only</c>.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.FirebaseMessagingClient.SingleMessageResponse">
            <summary>
            Represents the response messages sent by the FCM backend service when sending a single
            message. Primarily consists of the message ID (Name) that indicates success handoff to FCM.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Message">
            <summary>
            Represents a message that can be sent via Firebase Cloud Messaging (FCM). Contains payload
            information as well as the recipient information. The recipient information must be
            specified by setting exactly one of the <see cref="P:FirebaseAdmin.Messaging.Message.Token"/>, <see cref="P:FirebaseAdmin.Messaging.Message.Topic"/> or
            <see cref="P:FirebaseAdmin.Messaging.Message.Condition"/> fields.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Token">
            <summary>
            Gets or sets the registration token of the device to which the message should be sent.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Topic">
            <summary>
            Gets or sets the name of the FCM topic to which the message should be sent. Topic names
            may contain the <c>/topics/</c> prefix.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Condition">
            <summary>
            Gets or sets the FCM condition to which the message should be sent. Must be a valid
            condition string such as <c>"'foo' in topics"</c>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Data">
            <summary>
            Gets or sets a collection of key-value pairs that will be added to the message as data
            fields. Keys and the values must not be null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Notification">
            <summary>
            Gets or sets the notification information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Android">
            <summary>
            Gets or sets the Android-specific information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Webpush">
            <summary>
            Gets or sets the Webpush-specific information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.Apns">
            <summary>
            Gets or sets the APNs-specific information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Message.UnprefixedTopic">
            <summary>
            Gets or sets the formatted representation of the <see cref="P:FirebaseAdmin.Messaging.Message.Topic"/>. Removes the
            <c>/topics/</c> prefix if present. This is what's ultimately sent to the FCM
            service.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.Message.CopyAndValidate">
            <summary>
            Copies this message, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service. Each property is copied
            before validation to guard against the original being modified in the user code
            post-validation.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.MulticastMessage">
            <summary>
            Represents a message that can be sent to multiple devices via Firebase Cloud Messaging (FCM).
            Contains payload information as well as the list of device registration tokens to which the
            message should be sent. A single <c>MulticastMessage</c> may contain up to 100 registration
            tokens.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Tokens">
            <summary>
            Gets or sets the registration tokens for the devices to which the message should be distributed.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Data">
            <summary>
            Gets or sets a collection of key-value pairs that will be added to the message as data
            fields. Keys and the values must not be null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Notification">
            <summary>
            Gets or sets the notification information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Android">
            <summary>
            Gets or sets the Android-specific information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Webpush">
            <summary>
            Gets or sets the Webpush-specific information to be included in the message.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.MulticastMessage.Apns">
            <summary>
            Gets or sets the APNs-specific information to be included in the message.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Notification">
            <summary>
            Represents the notification parameters that can be included in a <see cref="T:FirebaseAdmin.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Notification.Title">
            <summary>
            Gets or sets the title of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.Notification.Body">
            <summary>
            Gets or sets the body of the notification.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.Notification.CopyAndValidate">
            <summary>
            Copies this notification. There is nothing to be validated in this class, but we use
            the same method name as in other classes in this namespace.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.Priority">
            <summary>
            Priority levels that can be set on an <see cref="T:FirebaseAdmin.Messaging.AndroidConfig"/>.
            </summary>
        </member>
        <member name="F:FirebaseAdmin.Messaging.Priority.High">
            <summary>
            High priority message.
            </summary>
        </member>
        <member name="F:FirebaseAdmin.Messaging.Priority.Normal">
            <summary>
            Normal priority message.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.SendResponse">
            <summary>
            The result of an individual send operation that was executed as part of a batch. See
            <see cref="T:FirebaseAdmin.Messaging.BatchResponse"/> for more details.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.SendResponse.MessageId">
            <summary>
            Gets a message ID string if the send operation was successful. Otherwise returns null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.SendResponse.Exception">
            <summary>
            Gets an exception if the send operation failed. Otherwise returns null.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.SendResponse.IsSuccess">
            <summary>
            Gets a value indicating whether the send operation was successful or not. When this property
            is <c>true</c>, <see cref="P:FirebaseAdmin.Messaging.SendResponse.MessageId"/> is guaranteed to return a
            non-null value. When this property is <c>false</c>,
            <see cref="P:FirebaseAdmin.Messaging.SendResponse.Exception"/> is guaranteed to return a non-null value.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.WebpushConfig">
            <summary>
            Represents the Webpush protocol options that can be included in a <see cref="T:FirebaseAdmin.Messaging.Message"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushConfig.Headers">
            <summary>
            Gets or sets the Webpush HTTP headers. Refer
            <see href="https://tools.ietf.org/html/rfc8030#section-5">
            Webpush specification</see> for supported headers.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushConfig.Data">
            <summary>
            Gets or sets the Webpush data fields. When set, overrides any data fields set via
            <see cref="P:FirebaseAdmin.Messaging.Message.Data"/>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushConfig.Notification">
            <summary>
            Gets or sets the Webpush notification that will be included in the message.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.WebpushConfig.CopyAndValidate">
            <summary>
            Copies this Webpush config, and validates the content of it to ensure that it can be
            serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
        <member name="T:FirebaseAdmin.Messaging.WebpushNotification">
            <summary>
            Represents the Webpush-specific notification options that can be included in a
            <see cref="T:FirebaseAdmin.Messaging.Message"/>. Supports most standard options defined in the
            <see href="https://developer.mozilla.org/en-US/docs/Web/API/notification/Notification">
            Web Notification specification</see>.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Title">
            <summary>
            Gets or sets the title text of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Body">
            <summary>
            Gets or sets the body text of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Icon">
            <summary>
            Gets or sets the URL to the icon of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Badge">
            <summary>
            Gets or sets the URL of the image used to represent the notification when there is not
            enough space to display the notification itself.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Data">
            <summary>
            Gets or sets some arbitrary data that will be included in the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Direction">
            <summary>
            Gets or sets the direction in which to display the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Image">
            <summary>
            Gets or sets the URL of an image to be displayed in the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Language">
            <summary>
            Gets or sets the language of the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Renotify">
            <summary>
            Gets or sets whether the user should be notified after a new notification replaces an
            old one.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.RequireInteraction">
            <summary>
            Gets or sets whether the notification should remain active until the user clicks or
            dismisses it, rather than closing it automatically.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Silent">
            <summary>
            Gets or sets whether the notification should be silent.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Tag">
            <summary>
            Gets or sets an identifying tag for the notification.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.TimestampMillis">
            <summary>
            Gets or sets the notification's timestamp value in milliseconds.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Vibrate">
            <summary>
            Gets or sets a vibration pattern for the receiving device's vibration hardware.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.Actions">
            <summary>
            Gets or sets a collection of Webpush notification actions.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.CustomData">
            <summary>
            Gets or sets the custom key-value pairs that will be included in the
            notification. This is exposed as an <see cref="T:System.Collections.Generic.IDictionary`2"/> to support
            correct deserialization of custom properties.
            </summary>
        </member>
        <member name="P:FirebaseAdmin.Messaging.WebpushNotification.DirectionString">
            <summary>
            Gets or sets the string representation of the <see cref="P:FirebaseAdmin.Messaging.WebpushNotification.Direction"/> property.
            </summary>
        </member>
        <member name="M:FirebaseAdmin.Messaging.WebpushNotification.CopyAndValidate">
            <summary>
            Copies this Webpush notification, and validates the content of it to ensure that it can
            be serialized into the JSON format expected by the FCM service.
            </summary>
        </member>
    </members>
</doc>
